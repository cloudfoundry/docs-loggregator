---
title:  Container metrics
owner:
---

This topic tells you about the metrics that are emitted by all containers managed by <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>) and its scheduling
system, Diego.

App metrics include the container metrics, and any custom app metrics that developers create.


## <a id='container-metrics'></a> Diego Container metrics

Diego containers emit resource usage metrics for the app instance. Diego averages and emits each metric every 15 seconds.

The following table describes all Diego container metrics:

<table id='container-metrics' class="nice" >
  <tr>
    <th width=20%>Metric</th>
    <th width=65%>Description</th>
    <th width=15%>Unit</th>
  </tr><tr>
    <td><code>CpuPercentage</code></td>
    <td>CPU time used by AI as a percentage of a single CPU core.<br><br>
    This is usually no greater than <code>100% * the number of vCPUs on the host Diego cell</code>, but it may be more due to discrepancies in measurement timing.</td>
    <td><code>float64</code></td>
  </tr><tr>
    <td><code>AbsoluteCPUEntitlement</code></td>
    <td>CPU time that the AI was entitled to use.<br><br>
    At minimum, the CPU time that a Diego cell provides an AI is <code>min(app memory, 8 GB) * (Diego cell vCPUs/Diego cell memory) * 100%</code>.<br><br>
    The platform operator can provide the Diego cell <code>vCPUs/memory</code> ratio to developers.<br>
    If a Diego cell is not at capacity or if other workloads on it are idle, the cell can provide more than the minimum CPU.</td>
    <td><code>uint64</code></td>
  </tr><tr>
    <td><code>AbsoluteCPUUsage</code></td>
    <td>CPU time used by AI.<br><br>
    <code>AbsoluteCPUUsage / AbsoluteCPUEntitlement</code> calculates a 0-100% range of AI usage per entitlement.</td>
    <td><code>uint64</code></td>
  </tr><tr>
    <td><code>MemoryBytes</code></td>
    <td>RAM memory used by AI, in MB.</td>
    <td><code>uint64</code></td>
  </tr><tr>
    <td><code>MemoryBytesQuota</code></td>
    <td>RAM memory available, in GB.</td>
    <td><code>uint64</code></td>
  </tr><tr>
    <td><code>DiskBytes</code></td>
    <td>Disk space used by AI, in MB.</td>
    <td><code>uint64</code></td>
  </tr><tr>
    <td><code>DiskBytesQuota</code></td>
    <td>Disk space available, in GB.</td>
    <td><code>uint64</code></td>
  </tr><tr>
    <td><code>ContainerAge</code></td>
    <td>Age of container, in nanoseconds.</td>
    <td><code>uint64</code></td>
  </tr>
</table>

**Loggregator v1**: Most of the container metrics are emitted in a `ContainerMetric` envelope.
The `AbsoluteCPUEntitlement`, `AbsoluteCPUUsage`, and `ContainerAge` container metrics are emitted
as separate `ValueMetric` envelopes.

**Loggregator v2**: All container metrics are emitted in gauge envelopes. The
`AbsoluteCPUEntitlement`, `AbsoluteCPUUsage`, and `ContainerAge` container metrics are emitted in a
separate envelope to the other container metrics.

## <a id="cf-cli"></a> Retrieve Container Metrics from the cf CLI

You can use Cloud Foundry command-line interface (cf CLI) commands to return container metrics.

## <a id='cf-cli'></a> Retrieving Container metrics from the cf CLI

You can retrieve container metrics using the Cloud Foundry Command Line Interface (cf CLI).

To retrieve CPU, memory, and disk metrics for all instances of an app, see [Retrieve CPU, Memory, and Disk Metrics](#cpu-mem-disk) below.

To retrieve CPU entitlement metrics for all instances of an app, see [Retrieve CPU Entitlement Metrics](#cpu-entitlement) below.

To determine when an app has exceeded its CPU entitlement, see [Monitor Apps That Exceed Their CPU Entitlement](#cpu-entitlement) below.

### <a id='cf-mem-disk'></a> Retrieving CPU, Memory, and Disk metrics

To retrieve CPU, memory, and disk metrics for all instances of an app:

1. Run the command `cf app APP-NAME`.

The command output lists Diego container metric values as follows:

| Label in Output | Metrics listed, as described in [Diego Container Metrics](#container-metrics), above |
|---|---|
| `cpu` | `CpuPercentage` |
| `memory` | `MemoryBytes` of `MemoryBytesQuota` |
| `disk` | `DiskBytes` of `DiskBytesQuota` |

For example:

### <a id='cf-entitlement'></a> Retrieving CPU Entitlement metrics

name:              dora-example
requested state:   started
routes:            dora-example.bosh-lite.com
last uploaded:     Fri 05 Apr 10:41:21 PDT 2019
stack:             cflinuxfs3
buildpacks:        ruby

type:           web
instances:      1/1
memory usage:   256M
     state     since                  cpu    memory          disk          details
#0   running   2019-04-05T17:41:31Z   0.4%   39.5M of 256M   89.9M of 1G
</pre>

### <a id="cf-app"></a> Retrieve CPU Entitlement Metrics (Experimental)

To see app instance `AbsoluteCPUEntitlement` metrics from the command line:

1. Install the CPU Entitlement Plugin from [cpu-entitlement-plugin](https://github.com/cloudfoundry/cpu-entitlement-plugin) in GitHub.

### <a id='cpu-entitlement'></a> Determining when Apps exceed their CPU Entitlement

You can use the Cloud Foundry CPU Overentitlement Plug-in to determine when an app has exceeded its CPU entitlement and might need to be scaled up.

<pre class="terminal">
$ cf cpu-entitlement dora-example
Note: This feature is experimental.
Showing CPU usage against entitlement for app dora-example in org example-org / space example-org-staging as dora@example.com ...
​
     avg usage   curr usage
#0   1.62%       1.66%
#1   2.93%       3.09%
#2   2.51%       2.62%
​
</pre>

