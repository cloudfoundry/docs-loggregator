---
title: Overview of the Loggregator System
owner: Logging and Metrics
---

<strong><%= modified_date %></strong>

Loggregator is the next generation system for aggregating and streaming logs and metrics from all of the user apps and system components in a<%= vars.product_full=='Cloud Foundry' ? "" : "n"  %> <%= vars.product_full %> deployment.

View the [Loggregator repository on GitHub](https://github.com/cloudfoundry/loggregator).

# <a name='use-cases'></a> Using Loggregator

The primary use cases for Loggregator include the following:

- App developers can tail their application logs or dump the recent logs from the Cloud Foundry Command Line Interface (cf CLI), or stream these to a third-party log archive and analysis service.

- Operators and administrators can access the **Loggregator [Firehose](#firehose)**, the combined stream of logs from all apps, and the  metrics data from Cloud Foundry components.

- Operators can deploy **nozzles** to the Firehose. A nozzle is a component that monitors the Firehose for specified events and metrics, and streams this data to external services.

# <a name='use-cases'></a> Loggregator Components

<% if vars.product_name == 'CF' %>
<%= image_tag 'architecture/loggregator.png' %>
<% else %>
<%= image_tag 'architecture/loggregatornew.png' %>
<% end %>

<% if vars.product_name == 'CF' %>
To see a larger version of this diagram, click <a href="./images/architecture/loggregator.png">here</a>.
<% else %>
To see a larger version of this diagram, click <a href="./images/architecture/loggregatornew.png">here</a>.
<% end %>

<p class="note"><strong>Note</strong>: The Loggregator system uses <a href="http://www.grpc.io/">gRPC</a> for communication between the Metron Agent and the Doppler, and between the Doppler and the Traffic Controller. This improves the stability and the performance of the Loggregator system, but it may require operators to scale their Dopplers.</p>

## <a name='sources'></a>Source

Sources are logging agents that run on the Cloud Foundry components.

## <a name='metron'></a>Metron

Metron agents are co-located with sources. They collect logs and forward them to the Doppler servers.

## <a name='doppler'></a>Doppler

Dopplers gather logs from the Metron agents, store them in temporary buffers, and forward them to the Traffic Controller or to third-party syslog drains.

## <a name='traffic-controller'></a>Traffic Controller

The Traffic Controller handles client requests for logs. It gathers and collates messages from all Doppler servers, and provides external API and message translation as needed for legacy APIs. Th Traffic Controller
also exposes the Firehose.

## <a name='firehose'></a>Firehose

The Firehose is a WebSocket endpoint that streams all the event data coming from a<%= vars.product_full=='Cloud Foundry' ? "" : "n"  %>  <%= vars.product_full %> deployment. The data stream includes logs, HTTP events and container metrics from all applications, and metrics from all <%= vars.product_full %> system components. Logs from system components such as Cloud Controller are not included in the firehose and are typically accessed through rsyslog configuration.

Because the data coming from the Firehose may contain sensitive information, such as customer information in the application logs, only users with the correct permissions can access the Firehose.

The Traffic Controller serves the Firehose over WebSocket at the `/firehose` endpoint. The events coming out of the Firehose are formatted as protobuf messages conforming to the [dropsonde protocol](https://github.com/cloudfoundry/dropsonde-protocol).

You can discover the address of the Traffic Controller by hitting the `info` endpoint on the API and retrieving the value of the `doppler_logging_endpoint`.

Example for a BOSH Lite CF environment:
<pre class='terminal'>
$ cf curl /v2/info | jq .doppler\_logging\_endpoint
wss://doppler.192.0.2.34.xip.io:443
</pre>

### <a name='logs-vs-metrics'></a>Difference Between Logs and Metrics

The Firehose carries both logs and metrics, which differ as follows:

* **Metrics**
  - Report a measurement from a VM, or the status of a VM, at its timestamp time
  - Follow [dropsonde](https://github.com/cloudfoundry/dropsonde-protocol) or [statsd](https://github.com/etsy/statsd) protocol
  - Can route to a monitoring platform to trigger alerts
* **Logs**
  - Report events detected, actions taken, errors, or any other messages the operator or developer wanted to generate
  - Follow the syslog standard
  - Are not used to trigger alerts

## <a name='nozzles'></a> Nozzles

Nozzles are programs which consume data from the Loggregator Firehose. Nozzles can be configured to select, buffer, and transform data, and forward it to other applications and services. Example nozzles include the following:

- The JMX Bridge OpenTSDB Firehose Nozzle, which installs with [JMX Bridge](http://docs.pivotal.io/jmx-bridge)
- The [Blue Medora nozzle](https://github.com/BlueMedoraPublic/bluemedora-firehose-nozzle), which publishes metrics coming from the Firehose to VMware vRealize Operations and New Relic
- The [Datadog nozzle](https://github.com/cloudfoundry-incubator/datadog-firehose-nozzle), which publishes metrics coming from the Firehose to Datadog
- The [Syslog nozzle](https://github.com/cloudfoundry-community/firehose-to-syslog), which filters out log messages coming from the Firehose and sends it to a syslog server

For more information about nozzles, see the [Nozzle Tutorial](./nozzle-tutorial.html).

<% if vars.product_name == 'CF' %>
<% else %>
## <a name='syslog'></a> Scalable Syslog

This section describes the Scalable Syslog components of Loggregator.

* **What Scalable Syslog does**:
	* Loggregator uses the [Scalable Syslog BOSH release](https://github.com/cloudfoundry/scalable-syslog-release) to support developers who want to stream app logs to a syslog-compatible aggregation or analytics service. See [Streaming Application Logs to Log Management Services](../devguide/services/log-management.html#user-provided).  
* **What Scalable Syslog consists of**:
	* Scalable Syslog includes the Reverse Log Proxy (RLP) and Syslog Adapter components described below. These components run on VMs deployed with Elastic Runtime that you can scale independently to support large numbers of user-provided syslog drains. 
* **How you can scale**:
	* See [Configuring System Logging in Elastic Runtime](../opsguide/logging-config-opsman.html#scaling).
* **When to scale**:
	* For guidance on monitoring and scaling, see the [Scalable Syslog Metrics](../monitoring/kpi.html#scalable-syslog) and [Scalable Syslog Scaling Indicator](../monitoring/key-cap-scaling.html#scalable-syslog) sections of the _Monitoring Pivotal Cloud Foundry_ guide.

### <a name='rlp'></a> Reverse Log Proxy (RLP)

RLPs are a BOSH jobs colocated with the Traffic Controller that collect  logs from Dopplers and forward them to Syslog Adapters. You can scale this component based on your overall log volume.

### <a name='adapter'></a> Syslog Adapter

Syslog Adapters are BOSH VMs that manage connections with and write to syslog services, or drains. You can scale this component based on the number of drains. 
<% end %>
